name: Test

on:
  - push

jobs:
  build-xdia:
    name: Build xdia on Windows
    runs-on: windows-latest
    steps:
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.10'
    - uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0
    - name: Build
      run: |
        cmake -Ssrc/xdia -Bbuild -Ax64
        cmake --build build --config Release --parallel --verbose
        cmake --install build --prefix dist
    - name: Test
      shell: bash
      run: |
        MSDIA_PATH=$PWD/dist/msdia140.dll ./dist/xdia.exe ./tests/hello-wdm.pdb
    - uses: actions/upload-artifact@v4.3.3
      with:
        name: xdia
        path: dist

  build-xdialdr:
    name: Build xdialdr on Ubuntu
    runs-on: ubuntu-latest
    needs: build-xdia
    steps:
    - uses: actions/setup-python@v5.1.0
      with:
        python-version: '3.10'
    - uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0
    - uses: actions/download-artifact@v4.1.7
      with:
        name: xdia
        path: xdia
    - name: Build
      run: |
        cmake -Bbuild -S.
        cmake --build build --target xdialdr
        cmake --install build --prefix dist
    - name: Test
      run: |
        export MSDIA_PATH=$PWD/xdia/msdia140.dll
        export XDIA_PATH=$PWD/xdia/xdia.exe
        ./dist/xdialdr ./tests/hello-wdm.pdb
    - uses: actions/upload-artifact@v4.3.3
      with:
        name: xdialdr
        path: dist

  build-py-sdist:
    name: Build pyxdia sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.10'
      - name: Build sdist
        run: |
          python -m pip install --user build
          python -m build --sdist --outdir dist ./pyxdia
      - uses: actions/upload-artifact@v4.3.3
        with:
          name: pyxdia-src
          path: dist/*.tar.gz

  build-py-wheels:
    needs: ["build-py-sdist", "build-xdia", "build-xdialdr"]
    name: Build pyxdia wheel ${{ matrix.wheel }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { arch: arm64,  wheel: cp310-macosx_arm64,     os: macos-latest   }
          - { arch: x86_64, wheel: cp310-macosx_x86_64,    os: macos-13       }
          - { arch: x86_64, wheel: cp310-manylinux_x86_64, os: ubuntu-latest  }
          - { arch: x86_64, wheel: cp310-win_amd64,        os: windows-latest }
    steps:
    - uses: actions/checkout@v4.1.7
      with:
        fetch-depth: 0
    - name: Install xdia
      uses: actions/download-artifact@v4.1.7
      with:
        name: xdia
        path: pyxdia/pyxdia/bin
    - name: Install xdialdr
      uses: actions/download-artifact@v4.1.7
      if: ${{ !startsWith(matrix.os, 'windows') }}
      with:
        name: xdialdr
        path: pyxdia/pyxdia/bin
    - name: Build wheel
      uses: pypa/cibuildwheel@v2.19.2
      with:
        package-dir: pyxdia
        output-dir: wheelhouse
      env:
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_BUILD: ${{ matrix.wheel }}
        CIBW_TEST_COMMAND: PDB_TEST_FILES={project}/tests python -m unittest discover -v -s {package}/tests
        CIBW_TEST_COMMAND_WINDOWS: set "PDB_TEST_FILES={project}/tests" & python -m unittest discover -v -s {package}/tests
        CIBW_BUILD_VERBOSITY: 1

        # FIXME: This is based only on blink requirement. Check the binary to find the
        #        actual requirement. This works for 1.1.0 release.
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.arch == 'arm64' && '14' || '11' }}
    - uses: actions/upload-artifact@v4.3.3
      with:
        name: pyxdia-whl-${{ matrix.wheel }}
        path: ./wheelhouse/*.whl
