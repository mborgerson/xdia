name: Test

on:
  - push

jobs:
  build-xdia:
    name: Build xdia on Windows
    runs-on: windows-latest
    steps:
    - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: '3.10'
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        fetch-depth: 0
    - name: Build
      run: |
        cmake -Ssrc/xdia -Bbuild -Ax64
        cmake --build build --config Release --parallel --verbose
        cmake --install build --prefix dist
    - name: Test
      run: set "MSDIA_PATH=./dist/msdia140.dll" & ./dist/xdia.exe ./tests/hello-wdm.pdb
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: xdia
        path: dist

  build-xdialdr:
    name: Build xdialdr on Ubuntu
    runs-on: ubuntu-latest
    needs: build-xdia
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        fetch-depth: 0
    - uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      with:
        name: xdia
        path: xdia
    - name: Build
      run: |
        cmake -Bbuild -S.
        cmake --build build --target xdialdr
        cmake --install build --prefix dist
        cd dist; tar -cvf xdialdr.tar *
    - name: Test
      run: |
        export MSDIA_PATH=$PWD/xdia/msdia140.dll
        export XDIA_PATH=$PWD/xdia/xdia.exe
        ./dist/xdialdr ./tests/hello-wdm.pdb
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: xdialdr
        path: dist/xdialdr.tar

  build-py-sdist:
    name: Build pyxdia sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
        with:
          python-version: '3.10'
      - name: Build sdist
        run: |
          python -m pip install --user build
          python -m build --sdist --outdir dist ./pyxdia
      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: pyxdia-src
          path: dist/*.tar.gz
          compression-level: 0  # Already compressed

  build-py-wheels:
    needs: ["build-py-sdist", "build-xdia", "build-xdialdr"]
    name: Build pyxdia wheel ${{ matrix.wheel }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - { arch: arm64,   wheel: cp310-macosx_arm64,      os: macos-latest     }
          - { arch: x86_64,  wheel: cp310-macosx_x86_64,     os: macos-13         }
          - { arch: x86_64,  wheel: cp310-manylinux_x86_64,  os: ubuntu-latest    }
          - { arch: aarch64, wheel: cp310-manylinux_aarch64, os: ubuntu-24.04-arm }
          - { arch: x86_64,  wheel: cp310-win_amd64,         os: windows-latest   }
    steps:
    - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        fetch-depth: 0
    - name: Install xdia artifact
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      with:
        name: xdia
        path: pyxdia/pyxdia/bin
    - name: Download xdialdr artifact
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      if: ${{ !startsWith(matrix.os, 'windows') }}
      with:
        name: xdialdr
    - name: Install xdialdr
      if: ${{ !startsWith(matrix.os, 'windows') }}
      run: tar -xvf xdialdr.tar -C pyxdia/pyxdia/bin
    - name: Build wheel
      uses: pypa/cibuildwheel@7e5a838a63ac8128d71ab2dfd99e4634dd1bca09 # v2.19.2
      with:
        package-dir: pyxdia
        output-dir: wheelhouse
      env:
        CIBW_ARCHS_MACOS: ${{ matrix.arch }}
        CIBW_BUILD: ${{ matrix.wheel }}
        CIBW_TEST_COMMAND: PDB_TEST_FILES={project}/tests python -m unittest discover -v -s {package}/tests
        CIBW_TEST_COMMAND_WINDOWS: set "PDB_TEST_FILES={project}/tests" & python -m unittest discover -v -s {package}/tests
        CIBW_BUILD_VERBOSITY: 1

        # FIXME: This is based only on blink requirement. Check the binary to find the
        #        actual requirement. This works for 1.1.0 release.
        MACOSX_DEPLOYMENT_TARGET: ${{ matrix.arch == 'arm64' && '14' || '11' }}
    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: pyxdia-whl-${{ matrix.wheel }}
        path: ./wheelhouse/*.whl

  upload_pypi:
    name: Upload wheels to PyPI
    needs: ["build-py-wheels"]
    environment:
      name: pypi
      url: https://pypi.org/p/pypcode
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    # Upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    steps:
      - name: Download pyxdia source and wheels
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          pattern: pyxdia-*
          merge-multiple: true
          path: dist
      - uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4

  release:
    name: Release
    needs: ["build-py-wheels"]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
    - name: Download xdia artifact
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      with:
        name: xdia
        path: xdia
    - name: Download xdialdr artifact
      uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
      with:
        name: xdialdr
    - name: Compress artifacts
      run: |
        mkdir dist
        pushd xdia; zip ../dist/xdia.zip *; popd
        xz xdialdr.tar && mv xdialdr.tar.xz dist
        ls dist
    - name: Release
      uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda # v2
      with:
        files: dist/*
